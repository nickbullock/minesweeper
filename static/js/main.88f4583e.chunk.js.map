{"version":3,"sources":["MineSweeper/types.ts","utils.ts","MineSweeper/utils.tsx","MineSweeper/Toolbar/FlagCounter/FlagCounter.tsx","MineSweeper/Toolbar/OhDatFace/OhDatFace.tsx","MineSweeper/Toolbar/Timer/Timer.tsx","MineSweeper/Toolbar/Toolbar.tsx","MineSweeper/Board/Cell/Cell.tsx","MineSweeper/Board/Board.tsx","MineSweeper/Board/utils.ts","MineSweeper/Borders/HorizontalBorder.tsx","MineSweeper/Borders/VerticalBorder.tsx","MineSweeper/Layout/Layout.tsx","test-utils.ts","MineSweeper/Processor/Processor.ts","SettingsModal/Form/types.ts","MineSweeper/VictoryModal/VictoryModal.tsx","MineSweeper/MineSweeper.tsx","SettingsModal/Form/constants.ts","MineSweeper/constants.ts","SettingsModal/Form/utils.ts","SettingsModal/Form/Form.tsx","SettingsModal/SettingsModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameStatus","CellView","getKey","x","y","shuffle","array","i","length","j","Math","floor","random","parseKey","key","split","map","Number","clamp","num","min","max","createRedNumbers","handledNum","className","substr","index","getGiphyImage","a","q","giphyURL","fetch","then","res","json","images","data","image","original","url","console","error","FlagCounter","memo","props","flagCount","gameStateToFaceMap","NotStarted","InProgress","Lose","Win","OhDatFace","status","onClick","face","Timer","time","Toolbar","onFaceClick","Cell","view","id","onRightClick","useState","isCellPressed","setIsCellPressed","onMouseUpHandler","useCallback","document","removeEventListener","onMouseDownHandler","e","button","Blank","addEventListener","onClickHandler","onRightClickHandler","preventDefault","Open","onMouseDown","onContextMenu","Board","board","onCellClick","onCellRightClick","rowsWithCells","setRowsWithCells","useEffect","Object","keys","reduce","cell","mapBoardToRowsWithCells","row","HorizontalBorder","type","VerticalBorder","long","Layout","toolbar","randomInt","Difficulty","Processor","rowCount","columnCount","mineCount","anyCellOpened","flagPositions","remainingBlankPositions","mineBoard","gameStatus","isBoardMoreThanHalfMined","this","createBoards","isGameFinished","isCellOutOfBounds","mine","startsWith","lose","setMines","openClosestCellsUntilNumber","checkForWin","getFlagRemainingCount","MineFlagged","push","splice","indexOf","freeCells","excludedCells","adjacentCells","getAdjacentCells","adjacentCellKeys","concat","slice","createCell","mineFreeMap","getMineFreeCells","startCount","forEach","resetMine","endCount","setMine","incrementAdjacentCellMineCount","root","decrementAdjacentCellMineCount","adjacentCellMineCount","filter","visitedAdjacentCells","newAdjacentCells","assign","result","self","newX","newY","MineRevealed","MineWrongFlagged","MineDeath","win","getGameStatus","adjacentCellCount","VictoryModal","isOpen","onRequestClose","overlayClassName","aria-label","src","alt","MineSweeper","settings","setBoard","setGameStatus","flagRemainingCount","setFlagRemainingCount","setTime","isVictoryModalOpened","setIsVictoryModalOpened","victoryImage","setVictoryImage","timerRef","useRef","processorRef","innerGameStatus","current","innerFlagRemainingCount","toggleVictoryModal","open","incTime","startTimer","window","setInterval","stopTimer","clearInterval","resetTimer","initGame","init","getBoard","flag","isSubscribed","Image","loadAndSetVictoryImage","catch","LEVELS","Beginner","Intermediate","Advanced","handleInputValue","value","defaultValue","parseInt","isNaN","Form","level","defaultRowCount","defaultColumnCount","defaultMineCount","onSubmit","onCancel","Custom","toString","setRowCount","setColumnCount","setMineCount","onRowCountChange","target","onColumnCountChange","onMineCountChange","selectedLevel","setSelectedLevel","onSubmitHandler","newSettings","handleColumnCountInputValue","maxMineCount","handleMineCountInputValue","onLevelChange","newLevelName","name","levelName","checked","onChange","htmlFor","autoComplete","disabled","SettingsModal","Modal","setAppElement","storageKey","App","isSettingsOpened","setIsSettingsOpened","localStorage","getItem","setLevel","setSettings","onSettingsClick","opened","setItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.88f4583e.chunk.js","sourcesContent":["export enum GameStatus {\n  NotStarted,\n  InProgress,\n  Win,\n  Lose,\n}\n\nexport interface MineSweeperSettings {\n  columnCount: number;\n  rowCount: number;\n  mineCount: number;\n}\n\nexport interface CellModel {\n  mine: boolean;\n  adjacentCellMineCount: number;\n}\n\nexport enum CellView {\n  MineFlagged = 'bombflagged',\n  MineDeath = 'bombdeath',\n  MineRevealed = 'bombrevealed',\n  MineWrongFlagged = 'wrongflagged',\n  Blank = 'blank',\n  Open = 'open0',\n  Open1 = 'open1',\n  Open2 = 'open2',\n  Open3 = 'open3',\n  Open4 = 'open4',\n  Open5 = 'open5',\n  Open6 = 'open6',\n  Open7 = 'open7',\n  Open8 = 'open8',\n}\n\nexport type XYKey = string;\nexport type CellBoard = Record<XYKey, CellModel | undefined>;\nexport type CellViewBoard = Record<XYKey, CellView>;\nexport type CellViewWithKey = { key: XYKey; view: CellView };\nexport type RowsWithCells = CellViewWithKey[][];\n","export const getKey = (x: number, y: number) => {\n  return `${x}-${y}`;\n};\n\nexport const shuffle = <T>(array: T[]) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n\n  return array;\n};\n\nexport const parseKey = (key: string) => {\n  const [x, y] = key.split('-').map(key => Number(key));\n\n  return { x, y };\n};\n\nexport const clamp = (num: number, min: number, max: number) => {\n  return Math.min(Math.max(num, min), max);\n};\n","import React from 'react';\n\nimport { shuffle } from '../utils';\n\nexport const createRedNumbers = (num: number) => {\n  const handledNum = num > 999 ? 999 : num;\n\n  return (\n    <div className=\"row\">\n      {('000' + handledNum)\n        .substr(-3)\n        .split('')\n        .map((num, index) => (\n          <div key={index} className={`sprite time${num}`} />\n        ))}\n    </div>\n  );\n};\n\nexport const getGiphyImage = async (): Promise<string> => {\n  const [q] = shuffle(['you+are+amazing', 'winner', 'win', 'victory', 'the+best', 'easy']);\n  let giphyURL = `https://api.giphy.com/v1/gifs/search?q=${q}&api_key=A7SsRREfX9e8F1irZommO3WNebEhcRd2&limit=10`;\n\n  try {\n    const images = await fetch(giphyURL).then(res => res.json());\n    const [image] = shuffle(images.data as any[]);\n\n    return image.images.original.url;\n  } catch (e) {\n    console.error(e);\n  }\n\n  return '';\n};\n","import { FC, memo } from 'react';\n\nimport { createRedNumbers } from '../../utils';\n\nexport interface FlagCounterProps {\n  flagCount: number;\n}\n\nexport const FlagCounter: FC<FlagCounterProps> = memo(props => {\n  const { flagCount } = props;\n\n  return <div className=\"flag-counter\">{createRedNumbers(flagCount)}</div>;\n});\n","import React, { FC, memo } from 'react';\n\nimport { GameStatus } from '../../types';\n\nexport interface GameStatusProps {\n  status: GameStatus;\n  onClick: () => void;\n}\n\nconst gameStateToFaceMap = {\n  [GameStatus.NotStarted]: 'facesmile',\n  [GameStatus.InProgress]: 'facesmile',\n  [GameStatus.Lose]: 'facedead',\n  [GameStatus.Win]: 'facewin',\n};\n\nexport const OhDatFace: FC<GameStatusProps> = memo(props => {\n  const { status, onClick } = props;\n  const face = gameStateToFaceMap[status];\n\n  return <div className={`sprite btn face ${face}`} onClick={onClick} />;\n});\n","import React from 'react';\nimport { FC, memo } from 'react';\n\nimport { createRedNumbers } from '../../utils';\n\nexport interface TimerProps {\n  time: number;\n}\n\nexport const Timer: FC<TimerProps> = memo(props => {\n  const { time } = props;\n\n  return <div className=\"timer\">{createRedNumbers(time)}</div>;\n});\n","import React, { FC, memo } from 'react';\n\nimport { GameStatus } from '../types';\n\nimport { FlagCounter } from './FlagCounter/FlagCounter';\nimport { OhDatFace } from './OhDatFace/OhDatFace';\nimport { Timer } from './Timer/Timer';\n\nexport interface ToolbarProps {\n  status: GameStatus;\n  flagCount: number;\n  time: number;\n  onFaceClick: () => void;\n}\n\nexport const Toolbar: FC<ToolbarProps> = memo(props => {\n  const { status, flagCount, time, onFaceClick } = props;\n\n  return (\n    <>\n      <FlagCounter flagCount={flagCount} />\n      <OhDatFace status={status} onClick={onFaceClick} />\n      <Timer time={time} />\n    </>\n  );\n});\n","import React, { FC, MouseEvent, memo, useCallback, useState } from 'react';\n\nimport { CellView } from '../../types';\nimport { parseKey } from '../../../utils';\n\nexport interface CellProps {\n  id: string;\n  view: CellView;\n  onClick: (x: number, y: number) => void;\n  onRightClick: (x: number, y: number) => void;\n}\n\nexport const Cell: FC<CellProps> = memo((props: CellProps) => {\n  const { view, id, onClick, onRightClick } = props;\n  const [isCellPressed, setIsCellPressed] = useState(false);\n\n  const onMouseUpHandler = useCallback(() => {\n    setIsCellPressed(false);\n    document.removeEventListener('mouseup', onMouseUpHandler);\n  }, []);\n\n  const onMouseDownHandler = useCallback(\n    (e: MouseEvent<HTMLDivElement>) => {\n      if (e.button === 0 && view === CellView.Blank) {\n        setIsCellPressed(true);\n        document.addEventListener('mouseup', onMouseUpHandler);\n      }\n    },\n    [onMouseUpHandler, view],\n  );\n\n  const onClickHandler = useCallback(() => {\n    const { x, y } = parseKey(id);\n\n    onClick(x, y);\n  }, [onClick, id]);\n\n  const onRightClickHandler = useCallback(\n    (e: MouseEvent) => {\n      e.preventDefault();\n\n      const { x, y } = parseKey(id);\n\n      onRightClick(x, y);\n    },\n    [onRightClick, id],\n  );\n\n  return (\n    <div\n      className={`sprite cell ${isCellPressed ? CellView.Open : view}`}\n      onMouseDown={onMouseDownHandler}\n      onClick={onClickHandler}\n      onContextMenu={onRightClickHandler}\n    />\n  );\n});\n","import React, { FC, memo, useEffect, useState } from 'react';\n\nimport { CellViewBoard, RowsWithCells } from '../types';\n\nimport { Cell } from './Cell/Cell';\nimport { mapBoardToRowsWithCells } from './utils';\n\nexport interface BoardProps {\n  board: CellViewBoard;\n  onCellClick: (x: number, y: number) => void;\n  onCellRightClick: (x: number, y: number) => void;\n}\n\nexport const Board: FC<BoardProps> = memo(props => {\n  const { board, onCellClick, onCellRightClick } = props;\n  const [rowsWithCells, setRowsWithCells] = useState<RowsWithCells>([]);\n\n  useEffect(() => {\n    const rowsWithCells = mapBoardToRowsWithCells(board);\n\n    setRowsWithCells(rowsWithCells);\n  }, [board]);\n\n  return (\n    <div className=\"column\">\n      {rowsWithCells?.map((row, index) => {\n        return (\n          <div className=\"row\" key={index}>\n            {row.map(cell => {\n              return (\n                <Cell\n                  id={cell.key}\n                  {...cell}\n                  onClick={onCellClick}\n                  onRightClick={onCellRightClick}\n                />\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n});\n","import { CellViewBoard, RowsWithCells } from '../types';\nimport { parseKey } from '../../utils';\n\nexport const mapBoardToRowsWithCells = (board: CellViewBoard): RowsWithCells => {\n  return Object.keys(board).reduce((res, key, index) => {\n    const { x } = parseKey(key);\n\n    const cell = {\n      key,\n      view: board[key],\n    };\n\n    if (res[x]) {\n      res[x] = [...res[x], cell];\n    } else {\n      res[x] = [cell];\n    }\n\n    return res;\n  }, [] as RowsWithCells);\n};\n","import React, { FC } from 'react';\n\nexport interface HorizontalBorderProps {\n  type?: 't' | 'b' | 'joint';\n}\n\nexport const HorizontalBorder: FC<HorizontalBorderProps> = ({ type = 't' }) => {\n  return (\n    <div className=\"row\">\n      <div className={`sprite border${type}l`} />\n      <div className={`sprite flex-1 bordertb`} />\n      <div className={`sprite border${type}r`} />\n    </div>\n  );\n};\n","import React, { FC } from 'react';\n\nexport interface VerticalBorderProps {\n  long?: boolean;\n}\n\nexport const VerticalBorder: FC<VerticalBorderProps> = ({ long = false }) => {\n  return (\n    <div className=\"column\">\n      <div className={`sprite borderlr${long ? 'long' : ''}`} />\n    </div>\n  );\n};\n","import React, { FC, ReactElement } from 'react';\n\nimport { HorizontalBorder } from '../Borders/HorizontalBorder';\nimport { VerticalBorder } from '../Borders/VerticalBorder';\n\nexport interface LayoutProps {\n  toolbar: ReactElement;\n  board: ReactElement;\n  className?: string;\n}\n\nexport const Layout: FC<LayoutProps> = props => {\n  const { toolbar, board, className } = props;\n\n  return (\n    <div className={`game${className ? ` ${className}` : ''}`}>\n      <div className=\"title-bar\">\n        <div className=\"title-bar-text\">Minesweeper</div>\n      </div>\n      <HorizontalBorder />\n      <div className=\"row\">\n        <VerticalBorder long />\n        <div className=\"row space-between flex-1 game-status-row\">{toolbar}</div>\n        <VerticalBorder long />\n      </div>\n      <HorizontalBorder type={'joint'} />\n      <div className=\"row flex-1\">\n        <VerticalBorder />\n        {board}\n        <VerticalBorder />\n      </div>\n      <HorizontalBorder type={'b'} />\n    </div>\n  );\n};\n","export function randomInt(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n","import { CellBoard, CellModel, CellView, CellViewBoard, GameStatus, XYKey } from '../types';\nimport { clamp, getKey, parseKey, shuffle } from '../../utils';\nimport { randomInt } from '../../test-utils';\n\nconst MINE_FREE_CELLS = 9;\n\nexport class Processor {\n  constructor(rowCount: number, columnCount: number, mineCount: number) {\n    this.rowCount = rowCount;\n    this.columnCount = columnCount;\n    this.mineCount = mineCount;\n    this.isBoardMoreThanHalfMined = this.mineCount > (this.rowCount * this.columnCount) / 2;\n  }\n\n  readonly columnCount: number;\n  readonly rowCount: number;\n  readonly mineCount: number;\n\n  private anyCellOpened: boolean = false;\n  private flagPositions: XYKey[] = [];\n  private remainingBlankPositions: CellViewBoard = {};\n  private mineBoard: CellBoard = {};\n  private board: CellViewBoard = {};\n  private gameStatus: GameStatus = GameStatus.NotStarted;\n  private isBoardMoreThanHalfMined: boolean = false;\n\n  public getBoard(): CellViewBoard {\n    return this.board;\n  }\n\n  public getGameStatus(): GameStatus {\n    return this.gameStatus;\n  }\n\n  public getFlagRemainingCount(): number {\n    return this.mineCount - this.flagPositions.length;\n  }\n\n  public init(): void {\n    const { board, mineBoard } = this.createBoards(this.isBoardMoreThanHalfMined);\n\n    this.mineBoard = mineBoard;\n    this.board = board;\n    this.remainingBlankPositions = { ...board };\n  }\n\n  public reset(): void {\n    this.board = {};\n    this.mineBoard = {};\n    this.anyCellOpened = false;\n  }\n\n  public open(x: number, y: number): void {\n    if (this.isGameFinished()) return;\n    if (this.isCellOutOfBounds(x, y)) return;\n\n    const key = getKey(x, y);\n    const view = this.board[key];\n    const mine = this.mineBoard[key]?.mine;\n\n    if (view.startsWith('open')) return;\n    if (this.anyCellOpened && mine) return this.lose(key);\n\n    if (!this.anyCellOpened) {\n      this.setMines(x, y);\n      this.anyCellOpened = true;\n      this.gameStatus = GameStatus.InProgress;\n    }\n\n    this.openClosestCellsUntilNumber(x, y);\n    this.checkForWin();\n  }\n\n  public flag(x: number, y: number): void {\n    if (this.isGameFinished()) return;\n    if (this.isCellOutOfBounds(x, y)) return;\n\n    const key = getKey(x, y);\n\n    if (this.board[key] === CellView.Blank) {\n      if (!this.getFlagRemainingCount()) return;\n      this.board[key] = CellView.MineFlagged;\n      this.flagPositions.push(key);\n    } else if (this.board[key] === CellView.MineFlagged) {\n      this.board[key] = CellView.Blank;\n      this.flagPositions.splice(this.flagPositions.indexOf(key), 1);\n    }\n\n    this.checkForWin();\n  }\n\n  private getMineFreeCells(x: number, y: number): Record<XYKey, CellModel | undefined> {\n    const key = getKey(x, y);\n    const freeCells = this.columnCount * this.rowCount - this.mineCount;\n    const excludedCells = freeCells >= MINE_FREE_CELLS ? MINE_FREE_CELLS : freeCells;\n    const adjacentCells = this.getAdjacentCells(x, y);\n    const adjacentCellKeys = Object.keys(adjacentCells);\n\n    let result;\n\n    if (adjacentCellKeys.length > excludedCells) {\n      result = [key].concat(shuffle(adjacentCellKeys)).slice(0, excludedCells);\n    } else {\n      result = [key].concat(adjacentCellKeys);\n    }\n\n    return result.reduce((res, key) => {\n      res[key] = this.createCell();\n\n      return res;\n    }, {} as Record<XYKey, CellModel | undefined>);\n  }\n\n  private setMines(x: number, y: number): void {\n    const mineFreeMap = this.getMineFreeCells(x, y);\n    let startCount = 0;\n\n    if (this.isBoardMoreThanHalfMined) {\n      Object.keys(mineFreeMap).forEach(key => {\n        const { x, y } = parseKey(key);\n\n        if (this.mineBoard[key]?.mine) {\n          this.resetMine(x, y);\n          startCount += 1;\n        }\n      });\n    }\n\n    const endCount = this.isBoardMoreThanHalfMined\n      ? this.rowCount * this.columnCount - this.mineCount\n      : this.mineCount;\n\n    while (startCount < endCount) {\n      const x = randomInt(0, this.rowCount - 1);\n      const y = randomInt(0, this.columnCount - 1);\n      const key = getKey(x, y);\n\n      if (this.isBoardMoreThanHalfMined) {\n        if (this.mineBoard[key]?.mine) {\n          this.resetMine(x, y);\n          startCount++;\n        }\n      } else {\n        if (!this.mineBoard[key]?.mine && !mineFreeMap[key]) {\n          this.setMine(x, y);\n          startCount++;\n        }\n      }\n    }\n  }\n\n  private setMine(x: number, y: number) {\n    const key = getKey(x, y);\n\n    this.mineBoard[key] = this.createCell(true);\n    this.incrementAdjacentCellMineCount(this.mineBoard, x, y);\n  }\n\n  private resetMine(x: number, y: number) {\n    const key = getKey(x, y);\n    const root = this.mineBoard[key];\n\n    if (root) {\n      root.mine = false;\n      this.decrementAdjacentCellMineCount(this.mineBoard, x, y);\n    }\n  }\n\n  private incrementAdjacentCellMineCount(board: CellBoard = this.mineBoard, x: number, y: number) {\n    Object.keys(this.getAdjacentCells(x, y)).forEach(key => {\n      const root = board[key];\n\n      if (root) {\n        root.adjacentCellMineCount += 1;\n      } else {\n        board[key] = this.createCell(false, 1);\n      }\n    });\n  }\n\n  private decrementAdjacentCellMineCount(board: CellBoard = this.mineBoard, x: number, y: number) {\n    Object.keys(this.getAdjacentCells(x, y)).forEach(key => {\n      const root = board[key];\n\n      if (root) {\n        root.adjacentCellMineCount -= 1;\n      } else {\n        const adjacentCells = this.getAdjacentCells(x, y);\n\n        const adjacentCellMineCount = Object.keys(adjacentCells).filter(\n          key => !!this.mineBoard[key]?.mine,\n        ).length;\n\n        board[key] = this.createCell(false, adjacentCellMineCount);\n      }\n    });\n  }\n\n  private openClosestCellsUntilNumber(x: number, y: number) {\n    const visitedAdjacentCells = {} as Record<XYKey, boolean | undefined>;\n    const adjacentCells = {} as Record<XYKey, CellModel | undefined>;\n    const getAdjacentCells = () => Object.keys(adjacentCells);\n    const key = getKey(x, y);\n\n    adjacentCells[key] = this.mineBoard[key];\n\n    while (getAdjacentCells().length) {\n      const [key] = getAdjacentCells();\n\n      const { x, y } = parseKey(key);\n      const adjacentCellMineCount = this.mineBoard[key]?.adjacentCellMineCount || 0;\n\n      if (adjacentCellMineCount === 0) {\n        this.board[key] = CellView.Open;\n\n        const newAdjacentCells = this.getAdjacentCells(x, y);\n\n        Object.keys(newAdjacentCells).forEach(key => {\n          if (visitedAdjacentCells[key]) delete newAdjacentCells[key];\n        });\n\n        Object.assign(adjacentCells, newAdjacentCells);\n      } else {\n        this.board[key] = ('open' + adjacentCellMineCount) as CellView;\n      }\n\n      visitedAdjacentCells[key] = true;\n      delete adjacentCells[key];\n      delete this.remainingBlankPositions[key];\n    }\n  }\n\n  private getAdjacentCells(x: number, y: number): Record<XYKey, boolean | undefined> {\n    const result = {} as Record<XYKey, boolean | undefined>;\n    const self = getKey(x, y);\n\n    for (let i = x - 1; i <= x + 1; i++) {\n      for (let j = y - 1; j <= y + 1; j++) {\n        const newX = clamp(i, 0, this.rowCount - 1);\n        const newY = clamp(j, 0, this.columnCount - 1);\n        const key = getKey(newX, newY);\n\n        result[key] = true;\n      }\n    }\n\n    delete result[self];\n\n    return result;\n  }\n\n  private lose(key: XYKey): void {\n    Object.keys(this.mineBoard).forEach(key => {\n      if (this.mineBoard[key]?.mine && this.board[key] !== CellView.MineFlagged) {\n        this.board[key] = CellView.MineRevealed;\n      }\n    });\n\n    this.flagPositions.forEach(key => {\n      if (this.board[key] === CellView.MineFlagged && !this.mineBoard[key]?.mine) {\n        this.board[key] = CellView.MineWrongFlagged;\n      }\n    });\n\n    this.board[key] = CellView.MineDeath;\n    this.gameStatus = GameStatus.Lose;\n  }\n\n  private checkForWin(): void {\n    const remainingBlankCellCount = Object.keys(this.remainingBlankPositions).length;\n\n    if (remainingBlankCellCount === this.mineCount) {\n      this.win();\n    }\n  }\n\n  private win(): void {\n    this.flagPositions = [];\n\n    Object.keys(this.mineBoard).forEach(key => {\n      if (this.mineBoard[key]?.mine) {\n        this.flagPositions.push(key);\n        this.board[key] = CellView.MineFlagged;\n      }\n    });\n\n    this.gameStatus = GameStatus.Win;\n  }\n\n  private isGameFinished(): boolean {\n    return this.getGameStatus() === GameStatus.Lose || this.getGameStatus() === GameStatus.Win;\n  }\n\n  private createBoards(mine = false): { board: CellViewBoard; mineBoard: CellBoard } {\n    const board: CellViewBoard = {};\n    const mineBoard: CellBoard = {};\n\n    for (let x = 0; x < this.rowCount; x++) {\n      for (let y = 0; y < this.columnCount; y++) {\n        const key = getKey(x, y);\n\n        board[key] = CellView.Blank;\n\n        if (mine) {\n          const adjacentCells = this.getAdjacentCells(x, y);\n          const adjacentCellCount = Object.keys(adjacentCells).length;\n\n          mineBoard[key] = this.createCell(mine, adjacentCellCount);\n        }\n      }\n    }\n\n    return { board, mineBoard };\n  }\n\n  private createCell(mine = false, adjacentCellMineCount = 0): CellModel {\n    return { mine, adjacentCellMineCount };\n  }\n\n  private isCellOutOfBounds(x: number, y: number) {\n    return x < 0 || y < 0 || x > this.rowCount - 1 || y > this.columnCount - 1;\n  }\n}\n","import { MineSweeperSettings } from '../../MineSweeper/types';\n\nexport enum Difficulty {\n  Beginner = 'Beginner',\n  Intermediate = 'Intermediate',\n  Advanced = 'Advanced',\n  Custom = 'Custom',\n}\n\nexport interface FormSubmitData {\n  settings: MineSweeperSettings;\n  level: Difficulty;\n}\n","import Modal from 'react-modal';\nimport React, { FC } from 'react';\n\nexport interface VictoryModalProps extends Modal.Props {\n  image: string;\n}\n\nexport const VictoryModal: FC<VictoryModalProps> = props => {\n  const { isOpen, image, onRequestClose } = props;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"modal fade-in\"\n      overlayClassName=\"modal-overlay\"\n      onRequestClose={onRequestClose}\n    >\n      <div className=\"window\">\n        <div className=\"title-bar\">\n          <div className=\"title-bar-text\">Victory!</div>\n          <div className=\"title-bar-controls\">\n            <button type=\"button\" aria-label=\"Close\" onClick={onRequestClose} />\n          </div>\n        </div>\n        <div className=\"window-body\">\n          <div className=\"row\">\n            <img src={image} className=\"m-auto\" alt=\"You are amazing!\" />\n          </div>\n          <div className=\"controls mt-10\">\n            <button type=\"button\" onClick={onRequestClose}>\n              Yahooo!\n            </button>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n","import React, { FC, useCallback, useEffect, useRef, useState } from 'react';\n\nimport './MineSweeper.css';\nimport { Toolbar } from './Toolbar/Toolbar';\nimport { Board } from './Board/Board';\nimport { Layout } from './Layout/Layout';\nimport { CellViewBoard, GameStatus, MineSweeperSettings } from './types';\nimport { Processor } from './Processor/Processor';\nimport { VictoryModal } from './VictoryModal/VictoryModal';\nimport { getGiphyImage } from './utils';\n\nexport interface MineSweeperProps {\n  settings: MineSweeperSettings;\n  className?: string;\n}\n\nexport const MineSweeper: FC<MineSweeperProps> = props => {\n  const { settings, className } = props;\n  const { rowCount, columnCount, mineCount } = settings;\n  const [board, setBoard] = useState<CellViewBoard>({});\n  const [gameStatus, setGameStatus] = useState(GameStatus.NotStarted);\n  const [flagRemainingCount, setFlagRemainingCount] = useState(mineCount);\n  const [time, setTime] = useState(0);\n  const [isVictoryModalOpened, setIsVictoryModalOpened] = useState(false);\n  const [victoryImage, setVictoryImage] = useState('');\n  const timerRef = useRef<number | null>(null);\n  const processorRef = useRef<Processor>(new Processor(rowCount, columnCount, mineCount));\n  const innerGameStatus = processorRef.current.getGameStatus();\n  const innerFlagRemainingCount = processorRef.current.getFlagRemainingCount();\n\n  const toggleVictoryModal = useCallback(() => {\n    setIsVictoryModalOpened(open => !open);\n  }, [setIsVictoryModalOpened]);\n\n  const incTime = useCallback(() => setTime(time => time + 1), []);\n\n  const startTimer = useCallback(() => {\n    incTime();\n\n    timerRef.current = window.setInterval(() => {\n      incTime();\n    }, 1000);\n  }, [incTime]);\n\n  const stopTimer = useCallback(() => {\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n  }, []);\n\n  const resetTimer = useCallback(() => {\n    stopTimer();\n    setTime(0);\n  }, [stopTimer]);\n\n  const initGame = useCallback(() => {\n    const { rowCount, columnCount, mineCount } = settings;\n\n    processorRef.current = new Processor(rowCount, columnCount, mineCount);\n    processorRef.current.init();\n    resetTimer();\n    setBoard(processorRef.current.getBoard());\n    setFlagRemainingCount(mineCount);\n  }, [settings, resetTimer]);\n\n  const onCellClick = useCallback((x: number, y: number) => {\n    processorRef.current.open(x, y);\n    setBoard({ ...processorRef.current.getBoard() });\n  }, []);\n\n  const onCellRightClick = useCallback((x: number, y: number) => {\n    processorRef.current.flag(x, y);\n    setBoard({ ...processorRef.current.getBoard() });\n  }, []);\n\n  const onFaceClick = useCallback(() => {\n    resetTimer();\n    initGame();\n  }, [initGame, resetTimer]);\n\n  useEffect(() => {\n    initGame();\n  }, [initGame]);\n\n  useEffect(() => {\n    setGameStatus(innerGameStatus);\n  }, [innerGameStatus]);\n\n  useEffect(() => {\n    setFlagRemainingCount(innerFlagRemainingCount);\n  }, [innerFlagRemainingCount]);\n\n  useEffect(() => {\n    if (gameStatus === GameStatus.InProgress) {\n      startTimer();\n    } else if (gameStatus === GameStatus.Win || gameStatus === GameStatus.Lose) {\n      if (gameStatus === GameStatus.Win) {\n        setIsVictoryModalOpened(true);\n      }\n      stopTimer();\n    }\n\n    return stopTimer;\n  }, [gameStatus, startTimer, stopTimer]);\n\n  useEffect(() => {\n    if (!isVictoryModalOpened) {\n      setVictoryImage('');\n    }\n  }, [isVictoryModalOpened]);\n\n  useEffect(() => {\n    if (!victoryImage) {\n      let isSubscribed = true;\n\n      const loadAndSetVictoryImage = async () => {\n        const image = await getGiphyImage();\n\n        new Image().src = image;\n\n        if (isSubscribed) {\n          setVictoryImage(image);\n        }\n      };\n\n      loadAndSetVictoryImage().catch(console.error);\n\n      return () => {\n        isSubscribed = false;\n      };\n    }\n  }, [victoryImage]);\n\n  return (\n    <>\n      <Layout\n        className={className}\n        toolbar={\n          <Toolbar\n            status={gameStatus}\n            time={time}\n            flagCount={flagRemainingCount}\n            onFaceClick={onFaceClick}\n          />\n        }\n        board={\n          <Board board={board} onCellClick={onCellClick} onCellRightClick={onCellRightClick} />\n        }\n      />\n      <VictoryModal\n        image={victoryImage}\n        isOpen={isVictoryModalOpened}\n        onRequestClose={toggleVictoryModal}\n      />\n    </>\n  );\n};\n","import {\n  DEFAULT_COLUMN_COUNT,\n  DEFAULT_MINE_COUNT,\n  DEFAULT_ROW_COUNT,\n} from '../../MineSweeper/constants';\nimport { MineSweeperSettings } from '../../MineSweeper/types';\n\nimport { Difficulty } from './types';\n\nexport const LEVELS: Record<string, MineSweeperSettings> = {\n  [Difficulty.Beginner]: {\n    rowCount: DEFAULT_ROW_COUNT,\n    columnCount: DEFAULT_COLUMN_COUNT,\n    mineCount: DEFAULT_MINE_COUNT,\n  },\n  [Difficulty.Intermediate]: {\n    rowCount: 16,\n    columnCount: 16,\n    mineCount: 40,\n  },\n  [Difficulty.Advanced]: {\n    rowCount: 16,\n    columnCount: 30,\n    mineCount: 99,\n  },\n};\n","export const MIN_ROW_COUNT = 1;\nexport const MIN_COLUMN_COUNT = 8;\nexport const MIN_MINE_COUNT = 1;\nexport const MAX_ROW_COUNT = 99;\nexport const MAX_COLUMN_COUNT = 99;\nexport const DEFAULT_ROW_COUNT = 9;\nexport const DEFAULT_COLUMN_COUNT = 9;\nexport const DEFAULT_MINE_COUNT = 10;\n","import { clamp } from '../../utils';\nimport {\n  DEFAULT_COLUMN_COUNT,\n  DEFAULT_MINE_COUNT,\n  DEFAULT_ROW_COUNT,\n  MAX_COLUMN_COUNT,\n  MAX_ROW_COUNT,\n  MIN_COLUMN_COUNT,\n  MIN_MINE_COUNT,\n  MIN_ROW_COUNT,\n} from '../../MineSweeper/constants';\n\nconst handleInputValue = (value: string, min: number, max: number, defaultValue: number) => {\n  let num = parseInt(value, 10);\n\n  if (!num || isNaN(num)) {\n    num = defaultValue;\n  } else {\n    num = clamp(num, min, max);\n  }\n\n  return num;\n};\n\nexport const handleRowCountInputValue = (value: string) =>\n  handleInputValue(value, MIN_ROW_COUNT, MAX_ROW_COUNT, DEFAULT_ROW_COUNT);\nexport const handleColumnCountInputValue = (value: string) =>\n  handleInputValue(value, MIN_COLUMN_COUNT, MAX_COLUMN_COUNT, DEFAULT_COLUMN_COUNT);\nexport const handleMineCountInputValue = (value: string, max: number) =>\n  handleInputValue(value, MIN_MINE_COUNT, max, DEFAULT_MINE_COUNT);\n","import React, { ChangeEvent, FC, FormEvent, memo, useCallback, useState } from 'react';\n\nimport { MineSweeperSettings } from '../../MineSweeper/types';\nimport {\n  DEFAULT_COLUMN_COUNT,\n  DEFAULT_MINE_COUNT,\n  DEFAULT_ROW_COUNT,\n} from '../../MineSweeper/constants';\n\nimport { LEVELS } from './constants';\nimport { Difficulty, FormSubmitData } from './types';\nimport {\n  handleColumnCountInputValue,\n  handleMineCountInputValue,\n  handleRowCountInputValue,\n} from './utils';\n\nexport interface FormProps {\n  level: Difficulty;\n  rowCount: string;\n  columnCount: string;\n  mineCount: string;\n  onSubmit: (data: FormSubmitData) => void;\n  onCancel?: any;\n}\n\nexport const Form: FC<FormProps> = memo(props => {\n  const {\n    level,\n    rowCount: defaultRowCount,\n    columnCount: defaultColumnCount,\n    mineCount: defaultMineCount,\n    onSubmit,\n    onCancel,\n  } = props;\n\n  const [rowCount, setRowCount] = useState(\n    level === Difficulty.Custom ? defaultRowCount : DEFAULT_ROW_COUNT.toString(),\n  );\n\n  const [columnCount, setColumnCount] = useState(\n    level === Difficulty.Custom ? defaultColumnCount : DEFAULT_COLUMN_COUNT.toString(),\n  );\n\n  const [mineCount, setMineCount] = useState(\n    level === Difficulty.Custom ? defaultMineCount : DEFAULT_MINE_COUNT.toString(),\n  );\n\n  const onRowCountChange = useCallback(e => setRowCount(e.target.value), []);\n  const onColumnCountChange = useCallback(e => setColumnCount(e.target.value), []);\n  const onMineCountChange = useCallback(e => setMineCount(e.target.value), []);\n\n  const [selectedLevel, setSelectedLevel] = useState(level);\n\n  const onSubmitHandler = useCallback(\n    (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n\n      let newSettings = {} as MineSweeperSettings;\n\n      if (selectedLevel === Difficulty.Custom) {\n        newSettings.rowCount = handleRowCountInputValue(rowCount);\n        newSettings.columnCount = handleColumnCountInputValue(columnCount);\n\n        const maxMineCount = newSettings.rowCount * newSettings.columnCount - 1;\n\n        newSettings.mineCount = handleMineCountInputValue(mineCount, maxMineCount);\n      } else {\n        newSettings = { ...LEVELS[selectedLevel] };\n      }\n\n      onSubmit({ settings: newSettings, level: selectedLevel });\n    },\n    [onSubmit, rowCount, columnCount, mineCount, selectedLevel],\n  );\n\n  const onLevelChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newLevelName = e.target.name as Difficulty;\n\n    setSelectedLevel(newLevelName);\n  }, []);\n\n  return (\n    <form onSubmit={onSubmitHandler}>\n      <div className=\"field-row\">\n        <div className=\"flex-1\">Difficulty</div>\n        <div className=\"flex-1\">Rows</div>\n        <div className=\"flex-1\">Columns</div>\n        <div className=\"flex-1\">Mines</div>\n      </div>\n      {Object.keys(LEVELS).map(levelName => {\n        const level = LEVELS[levelName];\n\n        return (\n          <div key={levelName} className=\"field-row\">\n            <div className=\"flex-1\">\n              <input\n                id={levelName}\n                type=\"radio\"\n                name={levelName}\n                checked={selectedLevel === levelName}\n                onChange={onLevelChange}\n              />\n              <label htmlFor={levelName}>{levelName}</label>\n            </div>\n            <div className=\"flex-1\">{level.rowCount}</div>\n            <div className=\"flex-1\">{level.columnCount}</div>\n            <div className=\"flex-1\">{level.mineCount}</div>\n          </div>\n        );\n      })}\n      <div className=\"field-row\">\n        <div className=\"flex-1\">\n          <input\n            id=\"Custom\"\n            type=\"radio\"\n            name=\"Custom\"\n            checked={selectedLevel === Difficulty.Custom}\n            onChange={onLevelChange}\n          />\n          <label htmlFor=\"Custom\">Custom</label>\n        </div>\n        <div className=\"flex-1\">\n          <input\n            id=\"rowCount\"\n            type=\"text\"\n            value={rowCount}\n            onChange={onRowCountChange}\n            className=\"input\"\n            autoComplete=\"off\"\n            disabled={selectedLevel !== Difficulty.Custom}\n          />\n        </div>\n        <div className=\"flex-1\">\n          <input\n            id=\"columnCount\"\n            type=\"text\"\n            value={columnCount}\n            onChange={onColumnCountChange}\n            className=\"input\"\n            autoComplete=\"off\"\n            disabled={selectedLevel !== Difficulty.Custom}\n          />\n        </div>\n        <div className=\"flex-1\">\n          <input\n            id=\"mineCount\"\n            type=\"text\"\n            value={mineCount}\n            onChange={onMineCountChange}\n            className=\"input\"\n            autoComplete=\"off\"\n            disabled={selectedLevel !== Difficulty.Custom}\n          />\n        </div>\n      </div>\n      <div className=\"controls mt-10\">\n        <button type=\"submit\">New game</button>\n        <button type=\"button\" onClick={onCancel}>\n          Cancel\n        </button>\n      </div>\n    </form>\n  );\n});\n","import Modal from 'react-modal';\nimport React, { FC } from 'react';\n\nimport { Form, FormProps } from './Form/Form';\n\nexport interface SettingsModalProps extends Modal.Props, FormProps {}\n\nexport const SettingsModal: FC<SettingsModalProps> = props => {\n  const {\n    level,\n    isOpen,\n    onRequestClose,\n    onSubmit,\n    rowCount: defaultRowCount,\n    columnCount: defaultColumnCount,\n    mineCount: defaultMineCount,\n  } = props;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"modal\"\n      overlayClassName=\"modal-overlay\"\n      onRequestClose={onRequestClose}\n    >\n      <div className=\"window\">\n        <div className=\"title-bar\">\n          <div className=\"title-bar-text\">Settings</div>\n          <div className=\"title-bar-controls\">\n            <button type=\"button\" aria-label=\"Close\" onClick={onRequestClose} />\n          </div>\n        </div>\n        <div className=\"window-body\">\n          <Form\n            level={level}\n            rowCount={defaultRowCount}\n            columnCount={defaultColumnCount}\n            mineCount={defaultMineCount}\n            onSubmit={onSubmit}\n            onCancel={onRequestClose}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './global.css';\nimport Modal from 'react-modal';\n\nimport { MineSweeper } from './MineSweeper/MineSweeper';\nimport { MineSweeperSettings } from './MineSweeper/types';\nimport { SettingsModal } from './SettingsModal/SettingsModal';\nimport { Difficulty, FormSubmitData } from './SettingsModal/Form/types';\nimport { LEVELS } from './SettingsModal/Form/constants';\nimport {\n  DEFAULT_COLUMN_COUNT,\n  DEFAULT_MINE_COUNT,\n  DEFAULT_ROW_COUNT,\n} from './MineSweeper/constants';\n\nModal.setAppElement('#root');\n\nconst storageKey = 'MineSweeperLevel';\n\nfunction App() {\n  const [isSettingsOpened, setIsSettingsOpened] = useState(false);\n\n  const [level, setLevel] = useState(\n    (localStorage.getItem(storageKey) as Difficulty) || Difficulty.Beginner,\n  );\n\n  const [settings, setSettings] = useState<MineSweeperSettings>({\n    rowCount: level === Difficulty.Custom ? DEFAULT_ROW_COUNT : LEVELS[level].rowCount,\n    columnCount: level === Difficulty.Custom ? DEFAULT_COLUMN_COUNT : LEVELS[level].columnCount,\n    mineCount: level === Difficulty.Custom ? DEFAULT_MINE_COUNT : LEVELS[level].mineCount,\n  });\n\n  const onSettingsClick = useCallback(() => setIsSettingsOpened(opened => !opened), []);\n\n  const onSubmit = useCallback(({ settings, level }: FormSubmitData) => {\n    setLevel(level);\n    setIsSettingsOpened(false);\n    setSettings(settings);\n  }, []);\n\n  useEffect(() => {\n    if (level !== Difficulty.Custom) {\n      localStorage.setItem(storageKey, level);\n    }\n  }, [level]);\n\n  return (\n    <div className=\"app column\">\n      <div className=\"row\">\n        <button className=\"m-auto\" onClick={onSettingsClick}>\n          Settings\n        </button>\n      </div>\n      <MineSweeper settings={settings} className=\"minesweeper\" />\n      <SettingsModal\n        level={level}\n        rowCount={settings.rowCount.toString()}\n        columnCount={settings.columnCount.toString()}\n        mineCount={settings.mineCount.toString()}\n        isOpen={isSettingsOpened}\n        onRequestClose={onSettingsClick}\n        onSubmit={onSubmit}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}